

@@ -0,0 +1,46 @@
# Read Me First
The following was discovered as part of building this project:

* The original package name 'com.zensar-spring-boot-demo' is invalid and this project uses 'com.zensarspringbootdemo' instead.

# Getting Started

### Reference Documentation
For further reference, please consider the following sections:

* [Official Apache Maven documentation](https://maven.apache.org/guides/index.html)
* [Spring Boot Maven Plugin Reference Guide](https://docs.spring.io/spring-boot/docs/2.7.0/maven-plugin/reference/html/)
* [Create an OCI image](https://docs.spring.io/spring-boot/docs/2.7.0/maven-plugin/reference/html/#build-image)
* [Spring Boot DevTools](https://docs.spring.io/spring-boot/docs/2.7.0/reference/htmlsingle/#using.devtools)
* [Spring Data JPA](https://docs.spring.io/spring-boot/docs/2.7.0/reference/htmlsingle/#data.sql.jpa-and-spring-data)
* [Spring Web](https://docs.spring.io/spring-boot/docs/2.7.0/reference/htmlsingle/#web)

### Guides
The following guides illustrate how to use some features concretely:

* [Accessing Data with JPA](https://spring.io/guides/gs/accessing-data-jpa/)
* [Building a RESTful Web Service](https://spring.io/guides/gs/rest-service/)
* [Serving Web Content with Spring MVC](https://spring.io/guides/gs/serving-web-content/)
* [Building REST services with Spring](https://spring.io/guides/tutorials/bookmarks/)

 342 spring-boot-demo-coupon/mvnw
@@ -0,0 +1,342 @@
#!/bin/sh
# ----------------------------------------------------------------------------
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements. See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership. The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at
#
# https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied. See the License for the
# specific language governing permissions and limitations
# under the License.
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Maven Start Up Batch script
#
# Required ENV vars:
# ------------------
# JAVA_HOME - location of a JDK home dir
#
# Optional ENV vars
# -----------------
# M2_HOME - location of maven2's installed home dir
# MAVEN_OPTS - parameters passed to the Java VM when running Maven
# e.g. to debug Maven itself, use
# set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
# MAVEN_SKIP_RC - flag to disable loading of mavenrc files
# ----------------------------------------------------------------------------

if [ -z "$MAVEN_SKIP_RC" ] ; then

 if [ -f /usr/local/etc/mavenrc ] ; then
 . /usr/local/etc/mavenrc
 fi

 if [ -f /etc/mavenrc ] ; then
 . /etc/mavenrc
 fi

 if [ -f "$HOME/.mavenrc" ] ; then
 . "$HOME/.mavenrc"
 fi

fi

# OS specific support. $var _must_ be set to either true or false.
cygwin=false;
darwin=false;
mingw=false
case "`uname`" in
 CYGWIN*) cygwin=true ;;
 MINGW*) mingw=true;;
 Darwin*) darwin=true
 # Use /usr/libexec/java_home if available, otherwise fall back to /Library/Java/Home
 # See https://developer.apple.com/library/mac/qa/qa1170/_index.html
 if [ -z "$JAVA_HOME" ]; then
 if [ -x "/usr/libexec/java_home" ]; then
 export JAVA_HOME="`/usr/libexec/java_home`"
 else
 export JAVA_HOME="/Library/Java/Home"
 fi
 fi
 ;;
esac

if [ -z "$JAVA_HOME" ] ; then
 if [ -r /etc/gentoo-release ] ; then
 JAVA_HOME=`java-config --jre-home`
 fi
fi

if [ -z "$M2_HOME" ] ; then
 ## resolve links - $0 may be a link to maven's home
 PRG="$0"

 # need this for relative symlinks
 while [ -h "$PRG" ] ; do
 ls=`ls -ld "$PRG"`
 link=`expr "$ls" : '.*-> \(.*\)$'`
 if expr "$link" : '/.*' > /dev/null; then
 PRG="$link"
 else
 PRG="`dirname "$PRG"`/$link"
 fi
 done

 saveddir=`pwd`

 M2_HOME=`dirname "$PRG"`/..

 # make it fully qualified
 M2_HOME=`cd "$M2_HOME" && pwd`

 cd "$saveddir"
 # echo Using m2 at $M2_HOME
fi

# For Cygwin, ensure paths are in UNIX format before anything is touched
if $cygwin ; then
 [ -n "$M2_HOME" ] &&
 M2_HOME=`cygpath --unix "$M2_HOME"`
 [ -n "$JAVA_HOME" ] &&
 JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
 [ -n "$CLASSPATH" ] &&
 CLASSPATH=`cygpath --path --unix "$CLASSPATH"`
fi

# For Mingw, ensure paths are in UNIX format before anything is touched
if $mingw ; then
 [ -n "$M2_HOME" ] &&
 M2_HOME="`(cd "$M2_HOME"; pwd)`"
 [ -n "$JAVA_HOME" ] &&
 JAVA_HOME="`(cd "$JAVA_HOME"; pwd)`"
fi

if [ -z "$JAVA_HOME" ]; then
 javaExecutable="`which javac`"
 if [ -n "$javaExecutable" ] && ! [ "`expr \"$javaExecutable\" : '\([^ ]*\)'`" = "no" ]; then
 # readlink(1) is not available as standard on Solaris 10.
 readLink=`which readlink`
 if [ ! `expr "$readLink" : '\([^ ]*\)'` = "no" ]; then
 if $darwin ; then
 javaHome="`dirname \"$javaExecutable\"`"
 javaExecutable="`cd \"$javaHome\" && pwd -P`/javac"
 else
 javaExecutable="`readlink -f \"$javaExecutable\"`"
 fi
 javaHome="`dirname \"$javaExecutable\"`"
 javaHome=`expr "$javaHome" : '\(.*\)/bin'`
 JAVA_HOME="$javaHome"
 export JAVA_HOME
 fi
 fi
fi

if [ -z "$JAVACMD" ] ; then
 if [ -n "$JAVA_HOME" ] ; then
 if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
 # IBM's JDK on AIX uses strange locations for the executables
 JAVACMD="$JAVA_HOME/jre/sh/java"
 else
 JAVACMD="$JAVA_HOME/bin/java"
 fi
 else
 JAVACMD="`\\unset -f command; \\command -v java`"
 fi
fi

if [ ! -x "$JAVACMD" ] ; then
 echo "Error: JAVA_HOME is not defined correctly." >&2
 echo " We cannot execute $JAVACMD" >&2
 exit 1
fi

if [ -z "$JAVA_HOME" ] ; then
 echo "Warning: JAVA_HOME environment variable is not set."
fi

CLASSWORLDS_LAUNCHER=org.codehaus.plexus.classworlds.launcher.Launcher

# traverses directory structure from process work directory to filesystem root
# first directory with .mvn subdirectory is considered project base directory
find_maven_basedir() {

 if [ -z "$1" ]
 then
 echo "Path not specified to find_maven_basedir"
 return 1
 fi

 basedir="$1"
 wdir="$1"
 while [ "$wdir" != '/' ] ; do
 if [ -d "$wdir"/.mvn ] ; then
 basedir=$wdir
 break
 fi
 # workaround for JBEAP-8937 (on Solaris 10/Sparc)
 if [ -d "${wdir}" ]; then
 wdir=`cd "$wdir/.."; pwd`
 fi
 # end of workaround
 done
 echo "${basedir}"
}

# concatenates all lines of a file
concat_lines() {
 if [ -f "$1" ]; then
 echo "$(tr -s '\n' ' ' < "$1")"
 fi
}

BASE_DIR=`find_maven_basedir "$(pwd)"`
if [ -z "$BASE_DIR" ]; then
 exit 1;
fi

##########################################################################################
# Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
# This allows using the maven wrapper in projects that prohibit checking in binary data.
##########################################################################################
if [ -r "$BASE_DIR/.mvn/wrapper/maven-wrapper.jar" ]; then
 if [ "$MVNW_VERBOSE" = true ]; then
 echo "Found .mvn/wrapper/maven-wrapper.jar"
 fi
else
 if [ "$MVNW_VERBOSE" = true ]; then
 echo "Couldn't find .mvn/wrapper/maven-wrapper.jar, downloading it ..."
 fi
 if [ -n "$MVNW_REPOURL" ]; then
 jarUrl="$MVNW_REPOURL/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar"
 else
 jarUrl="https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar"
 fi
 while IFS="=" read key value; do
 case "$key" in (wrapperUrl) jarUrl="$value"; break ;;
 esac
 done < "$BASE_DIR/.mvn/wrapper/maven-wrapper.properties"
 if [ "$MVNW_VERBOSE" = true ]; then
 echo "Downloading from: $jarUrl"
 fi
 wrapperJarPath="$BASE_DIR/.mvn/wrapper/maven-wrapper.jar"
 if $cygwin; then
 wrapperJarPath=`cygpath --path --windows "$wrapperJarPath"`
 fi

 if command -v wget > /dev/null; then
 if [ "$MVNW_VERBOSE" = true ]; then
 echo "Found wget ... using wget"
 fi
 if [ -z "$MVNW_USERNAME" ] || [ -z "$MVNW_PASSWORD" ]; then
 wget "$jarUrl" -O "$wrapperJarPath" || rm -f "$wrapperJarPath"
 else
 wget --http-user=$MVNW_USERNAME --http-password=$MVNW_PASSWORD "$jarUrl" -O "$wrapperJarPath" || rm -f "$wrapperJarPath"
 fi
 elif command -v curl > /dev/null; then
 if [ "$MVNW_VERBOSE" = true ]; then
 echo "Found curl ... using curl"
 fi
 if [ -z "$MVNW_USERNAME" ] || [ -z "$MVNW_PASSWORD" ]; then
 curl -o "$wrapperJarPath" "$jarUrl" -f
 else
 curl --user $MVNW_USERNAME:$MVNW_PASSWORD -o "$wrapperJarPath" "$jarUrl" -f
 fi

 else
 if [ "$MVNW_VERBOSE" = true ]; then
 echo "Falling back to using Java to download"
 fi
 javaClass="$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.java"
 # For Cygwin, switch paths to Windows format before running javac
 if $cygwin; then
 javaClass=`cygpath --path --windows "$javaClass"`
 fi
 if [ -e "$javaClass" ]; then
 if [ ! -e "$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class" ]; then
 if [ "$MVNW_VERBOSE" = true ]; then
 echo " - Compiling MavenWrapperDownloader.java ..."
 fi
 # Compiling the Java class
 ("$JAVA_HOME/bin/javac" "$javaClass")
 fi
 if [ -e "$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class" ]; then
 # Running the downloader
 if [ "$MVNW_VERBOSE" = true ]; then
 echo " - Running MavenWrapperDownloader.java ..."
 fi
 ("$JAVA_HOME/bin/java" -cp .mvn/wrapper MavenWrapperDownloader "$MAVEN_PROJECTBASEDIR")
 fi
 fi
 fi
fi
##########################################################################################
# End of extension
##########################################################################################

export MAVEN_PROJECTBASEDIR=${MAVEN_BASEDIR:-"$BASE_DIR"}
if [ "$MVNW_VERBOSE" = true ]; then
 echo $MAVEN_PROJECTBASEDIR
fi
MAVEN_OPTS="$(concat_lines "$MAVEN_PROJECTBASEDIR/.mvn/jvm.config") $MAVEN_OPTS"

# For Cygwin, switch paths to Windows format before running java
if $cygwin; then
 [ -n "$M2_HOME" ] &&
 M2_HOME=`cygpath --path --windows "$M2_HOME"`
 [ -n "$JAVA_HOME" ] &&
 JAVA_HOME=`cygpath --path --windows "$JAVA_HOME"`
 [ -n "$CLASSPATH" ] &&
 CLASSPATH=`cygpath --path --windows "$CLASSPATH"`
 [ -n "$MAVEN_PROJECTBASEDIR" ] &&
 MAVEN_PROJECTBASEDIR=`cygpath --path --windows "$MAVEN_PROJECTBASEDIR"`
fi

# Provide a "standardized" way to retrieve the CLI args that will
# work with both Windows and non-Windows executions.
MAVEN_CMD_LINE_ARGS="$MAVEN_CONFIG $@"
export MAVEN_CMD_LINE_ARGS

WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain

exec "$JAVACMD" \
 $MAVEN_OPTS \
 $MAVEN_DEBUG_OPTS \
 -classpath "$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar" \
 "-Dmaven.home=${M2_HOME}" \
 "-Dmaven.multiModuleProjectDirectory=${MAVEN_PROJECTBASEDIR}" \
 ${WRAPPER_LAUNCHER} $MAVEN_CONFIG "$@"
 188  spring-boot-demo-coupon/mvnw.cmd
@@ -0,0 +1,188 @@
@REM ----------------------------------------------------------------------------
@REM Licensed to the Apache Software Foundation (ASF) under one
@REM or more contributor license agreements. See the NOTICE file
@REM distributed with this work for additional information
@REM regarding copyright ownership. The ASF licenses this file
@REM to you under the Apache License, Version 2.0 (the
@REM "License"); you may not use this file except in compliance
@REM with the License. You may obtain a copy of the License at
@REM
@REM https://www.apache.org/licenses/LICENSE-2.0
@REM
@REM Unless required by applicable law or agreed to in writing,
@REM software distributed under the License is distributed on an
@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
@REM KIND, either express or implied. See the License for the
@REM specific language governing permissions and limitations
@REM under the License.
@REM ----------------------------------------------------------------------------

@REM ----------------------------------------------------------------------------
@REM Maven Start Up Batch script
@REM
@REM Required ENV vars:
@REM JAVA_HOME - location of a JDK home dir
@REM
@REM Optional ENV vars
@REM M2_HOME - location of maven2's installed home dir
@REM MAVEN_BATCH_ECHO - set to 'on' to enable the echoing of the batch commands
@REM MAVEN_BATCH_PAUSE - set to 'on' to wait for a keystroke before ending
@REM MAVEN_OPTS - parameters passed to the Java VM when running Maven
@REM e.g. to debug Maven itself, use
@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000
@REM MAVEN_SKIP_RC - flag to disable loading of mavenrc files
@REM ----------------------------------------------------------------------------

@REM Begin all REM lines with '@' in case MAVEN_BATCH_ECHO is 'on'
@echo off
@REM set title of command window
title %0
@REM enable echoing by setting MAVEN_BATCH_ECHO to 'on'
@if "%MAVEN_BATCH_ECHO%" == "on" echo %MAVEN_BATCH_ECHO%

@REM set %HOME% to equivalent of $HOME
if "%HOME%" == "" (set "HOME=%HOMEDRIVE%%HOMEPATH%")

@REM Execute a user defined script before this one
if not "%MAVEN_SKIP_RC%" == "" goto skipRcPre
@REM check for pre script, once with legacy .bat ending and once with .cmd ending
if exist "%USERPROFILE%\mavenrc_pre.bat" call "%USERPROFILE%\mavenrc_pre.bat" %*
if exist "%USERPROFILE%\mavenrc_pre.cmd" call "%USERPROFILE%\mavenrc_pre.cmd" %*
:skipRcPre

@setlocal

set ERROR_CODE=0

@REM To isolate internal variables from possible post scripts, we use another setlocal
@setlocal

@REM ==== START VALIDATION ====
if not "%JAVA_HOME%" == "" goto OkJHome

echo.
echo Error: JAVA_HOME not found in your environment. >&2
echo Please set the JAVA_HOME variable in your environment to match the >&2
echo location of your Java installation. >&2
echo.
goto error

:OkJHome
if exist "%JAVA_HOME%\bin\java.exe" goto init

echo.
echo Error: JAVA_HOME is set to an invalid directory. >&2
echo JAVA_HOME = "%JAVA_HOME%" >&2
echo Please set the JAVA_HOME variable in your environment to match the >&2
echo location of your Java installation. >&2
echo.
goto error

@REM ==== END VALIDATION ====

:init

@REM Find the project base dir, i.e. the directory that contains the folder ".mvn".
@REM Fallback to current working directory if not found.

set MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%
IF NOT "%MAVEN_PROJECTBASEDIR%"=="" goto endDetectBaseDir

set EXEC_DIR=%CD%
set WDIR=%EXEC_DIR%
:findBaseDir
IF EXIST "%WDIR%"\.mvn goto baseDirFound
cd ..
IF "%WDIR%"=="%CD%" goto baseDirNotFound
set WDIR=%CD%
goto findBaseDir

:baseDirFound
set MAVEN_PROJECTBASEDIR=%WDIR%
cd "%EXEC_DIR%"
goto endDetectBaseDir

:baseDirNotFound
set MAVEN_PROJECTBASEDIR=%EXEC_DIR%
cd "%EXEC_DIR%"

:endDetectBaseDir

IF NOT EXIST "%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config" goto endReadAdditionalConfig

@setlocal EnableExtensions EnableDelayedExpansion
for /F "usebackq delims=" %%a in ("%MAVEN_PROJECTBASEDIR%\.mvn\jvm.config") do set JVM_CONFIG_MAVEN_PROPS=!JVM_CONFIG_MAVEN_PROPS! %%a
@endlocal & set JVM_CONFIG_MAVEN_PROPS=%JVM_CONFIG_MAVEN_PROPS%

:endReadAdditionalConfig

SET MAVEN_JAVA_EXE="%JAVA_HOME%\bin\java.exe"
set WRAPPER_JAR="%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.jar"
set WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain

set DOWNLOAD_URL="https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar"

FOR /F "usebackq tokens=1,2 delims==" %%A IN ("%MAVEN_PROJECTBASEDIR%\.mvn\wrapper\maven-wrapper.properties") DO (
 IF "%%A"=="wrapperUrl" SET DOWNLOAD_URL=%%B
)

@REM Extension to allow automatically downloading the maven-wrapper.jar from Maven-central
@REM This allows using the maven wrapper in projects that prohibit checking in binary data.
if exist %WRAPPER_JAR% (
 if "%MVNW_VERBOSE%" == "true" (
 echo Found %WRAPPER_JAR%
 )
) else (
 if not "%MVNW_REPOURL%" == "" (
 SET DOWNLOAD_URL="%MVNW_REPOURL%/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar"
 )
 if "%MVNW_VERBOSE%" == "true" (
 echo Couldn't find %WRAPPER_JAR%, downloading it ...
 echo Downloading from: %DOWNLOAD_URL%
 )

 powershell -Command "&{"^
 "$webclient = new-object System.Net.WebClient;"^
 "if (-not ([string]::IsNullOrEmpty('%MVNW_USERNAME%') -and [string]::IsNullOrEmpty('%MVNW_PASSWORD%'))) {"^
 "$webclient.Credentials = new-object System.Net.NetworkCredential('%MVNW_USERNAME%', '%MVNW_PASSWORD%');"^
 "}"^
 "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; $webclient.DownloadFile('%DOWNLOAD_URL%', '%WRAPPER_JAR%')"^
 "}"
 if "%MVNW_VERBOSE%" == "true" (
 echo Finished downloading %WRAPPER_JAR%
 )
)
@REM End of extension

@REM Provide a "standardized" way to retrieve the CLI args that will
@REM work with both Windows and non-Windows executions.
set MAVEN_CMD_LINE_ARGS=%*

%MAVEN_JAVA_EXE% ^
 %JVM_CONFIG_MAVEN_PROPS% ^
 %MAVEN_OPTS% ^
 %MAVEN_DEBUG_OPTS% ^
 -classpath %WRAPPER_JAR% ^
 "-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%" ^
 %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*
if ERRORLEVEL 1 goto error
goto end

:error
set ERROR_CODE=1

:end
@endlocal & set ERROR_CODE=%ERROR_CODE%

if not "%MAVEN_SKIP_RC%"=="" goto skipRcPost
@REM check for post script, once with legacy .bat ending and once with .cmd ending
if exist "%USERPROFILE%\mavenrc_post.bat" call "%USERPROFILE%\mavenrc_post.bat"
if exist "%USERPROFILE%\mavenrc_post.cmd" call "%USERPROFILE%\mavenrc_post.cmd"
:skipRcPost

@REM pause the script if MAVEN_BATCH_PAUSE is set to 'on'
if "%MAVEN_BATCH_PAUSE%"=="on" pause

if "%MAVEN_TERMINATE_CMD%"=="on" exit %ERROR_CODE%

cmd /C exit /B %ERROR_CODE%
 83  spring-boot-demo-coupon/pom.xml

@@ -0,0 +1,83 @@
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
 <modelVersion>4.0.0</modelVersion>
 <parent>
 <groupId>org.springframework.boot</groupId>
 <artifactId>spring-boot-starter-parent</artifactId>
 <version>2.7.0</version>
 <relativePath /> <!-- lookup parent from repository -->
 </parent>
 <groupId>com.zensar</groupId>
 <artifactId>spring-boot-CouponService</artifactId>
 <version>0.0.1-SNAPSHOT</version>
 <name>spring-boot-CouponService</name>
 <description>Demo project for Spring Boot</description>
 <properties>
 <java.version>11</java.version>
 </properties>
 <!-- <packaging>war</packaging> -->
 <dependencies>
 <dependency>
 <groupId>org.springframework.boot</groupId>
 <artifactId>spring-boot-starter-web</artifactId>
 <exclusions>
 <exclusion>
 <groupId>org.springframework.boot</groupId>
 <artifactId>spring-boot-starter-tomcat</artifactId>
 </exclusion>
 </exclusions>
 </dependency>

 <dependency>
 <groupId>org.springframework.boot</groupId>
 <artifactId>spring-boot-starter-test</artifactId>
 <scope>test</scope>
 </dependency>
 <dependency>
 <groupId>org.springframework.boot</groupId>
 <artifactId>spring-boot-devtools</artifactId>
 <scope>runtime</scope>
 </dependency>
 <dependency>
 <groupId>org.springframework.boot</groupId>
 <artifactId>spring-boot-starter-data-jpa</artifactId>
 </dependency>
 <!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-xml -->
 <dependency>
 <groupId>com.fasterxml.jackson.dataformat</groupId>
 <artifactId>jackson-dataformat-xml</artifactId>
 <version>2.13.3</version><!--$NO-MVN-MAN-VER$ -->
 </dependency>
 <dependency>
 <groupId>org.modelmapper</groupId>
 <artifactId>modelmapper</artifactId>
 <version>3.0.0</version>
 </dependency>
 <dependency>
 <groupId>mysql</groupId>
 <artifactId>mysql-connector-java</artifactId>
 </dependency>
 <!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-jetty -->
 <dependency>
 <groupId>org.springframework.boot</groupId>
 <artifactId>spring-boot-starter-jetty</artifactId>
 </dependency>

 <dependency>
 <groupId>org.springframework.boot</groupId>
 <artifactId>spring-boot-starter-actuator</artifactId>
 </dependency>
 </dependencies>

 <build>
 <plugins>
 <plugin>
 <groupId>org.springframework.boot</groupId>
 <artifactId>spring-boot-maven-plugin</artifactId>
 </plugin>
 </plugins>
 </build>

</project> 
 98  spring-boot-demo-coupon/src/main/java/com/zensar/Controller/CouponController.java
@@ -0,0 +1,98 @@
package com.zensar.Controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.zensar.Service.CouponServiceImpl;
import com.zensar.dto.CouponDto;
import com.zensar.entity.Coupon;

@RestController
@RequestMapping(value = "/coupon-api", produces = { MediaType.APPLICATION_XML_VALUE,
 MediaType.APPLICATION_JSON_VALUE }, consumes = { MediaType.APPLICATION_JSON_VALUE,
 MediaType.APPLICATION_XML_VALUE })
public class CouponController {
 @Autowired
 private CouponServiceImpl couponservice;

 @GetMapping(value = "/coupons/{couponId}")
 public ResponseEntity<CouponDto> getCoupon(@PathVariable("couponId") int couponId) {
 return new ResponseEntity<CouponDto>(couponservice.getCoupon(couponId), HttpStatus.OK);
 }

 @GetMapping(value = "/coupons")
 public ResponseEntity<List<CouponDto>> getAllCoupon(
 @RequestParam(value = "pageNumber", required = false, defaultValue = "0") int pageNumber,
 @RequestParam(value = "pageSize", required = false, defaultValue = "10") int pageSize,
 @RequestParam(value = "sortBy", required = false, defaultValue = "couponName") String sortBy,
 @RequestParam(value = "dir", required = false, defaultValue = "DESC") Direction dir) {
 return new ResponseEntity<List<CouponDto>>(couponservice.getAllCoupon(pageNumber, pageSize, sortBy, dir),
 HttpStatus.OK);
 }

 @PostMapping(value = "/coupons")
 public ResponseEntity<CouponDto> insertCoupon(@RequestBody CouponDto couponDto) {
 return new ResponseEntity<CouponDto>(couponservice.insertCoupon(couponDto), HttpStatus.CREATED);
 }

 @PutMapping(value = "/coupons/{couponId}")
 public ResponseEntity<String> updateCoupon(@PathVariable("couponId") int couponId,
 @RequestBody CouponDto couponDto) {
 couponservice.updateCoupon(couponId, couponDto);
 return new ResponseEntity<String>("Student Updated Successfully", HttpStatus.OK);
 }

 @DeleteMapping(value = "/coupons/{couponId}")
 public ResponseEntity<String> deleteCoupon(@PathVariable("couponId") int couponId) {
 couponservice.deleteCoupon(couponId);
 return new ResponseEntity<String>("Student Deleted Successfully", HttpStatus.OK);

 }

 @GetMapping(value = "/coupons/couponcde/{couponCode}")
 public ResponseEntity<List<CouponDto>> getByCouponCode(@PathVariable("couponCode") String couponCode) {
 return new ResponseEntity<List<CouponDto>>(couponservice.getByCouponCode(couponCode), HttpStatus.OK);
 }

 @GetMapping(value = "/coupons/{couponCode}/{couponId}")
 public ResponseEntity<List<CouponDto>> findByCouponCodeAndCouponId(@PathVariable String couponCode,
 @PathVariable int couponId) {
 return new ResponseEntity<List<CouponDto>>(couponservice.findByCouponCodeAndCouponId(couponCode, couponId),
 HttpStatus.OK);
 }

 @GetMapping(value = "/coupons/couponcode/{couponCode}")
 public List<Coupon> com(@PathVariable String couponCode) {
 return couponservice.com(couponCode);
 }

 @GetMapping(value = "/coupons/cou/{couponCode}/{couponId}")
 public List<Coupon> com1(@PathVariable String couponCode, @PathVariable int couponId) {
 return couponservice.com1(couponCode, couponId);
 }

 @GetMapping(value = "/coupons/cc/{couponCode}/{couponId}")
 public List<Coupon> com2(@PathVariable String couponCode, @PathVariable int couponId) {
 return couponservice.com2(couponCode, couponId);
 }

 @GetMapping(value = "/coupons/repo/{couponCode}/{couponId}")
 public List<Coupon> com3(@PathVariable String couponCode, @PathVariable int couponId) {
 return couponservice.com3(couponCode, couponId);
 }

} 
 21  spring-boot-demo-coupon/src/main/java/com/zensar/Repository/CouponRepository.java
@@ -0,0 +1,21 @@
package com.zensar.Repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import com.zensar.entity.Coupon;

public interface CouponRepository extends JpaRepository<Coupon, Integer> {
 @Query("from Coupon c where c.couponCode=code or c.couponId=idd")
 List<Coupon> com3(@Param("code") String couponCode, @Param("idd") int couponId);

 List<Coupon> com(String couponCode);

 List<Coupon> com1(String couponCode, int couponId);

 List<Coupon> com2(String couponCode, int couponId);

} 
 33  spring-boot-demo-coupon/src/main/java/com/zensar/Service/CouponService.java
@@ -0,0 +1,33 @@
package com.zensar.Service;

import java.util.List;

import org.springframework.data.domain.Sort.Direction;

import com.zensar.dto.CouponDto;
import com.zensar.entity.Coupon;

public interface CouponService {
 public CouponDto getCoupon(int couponId);

 public List<CouponDto> getAllCoupon(int pageNumber, int pageSize, String sortBy, Direction dir);

 public CouponDto insertCoupon(CouponDto couponDto);

 public void updateCoupon(int couponId, CouponDto couponDto);

 public void deleteCoupon(int couponId);

 List<CouponDto> getByCouponCode(String couponCode);

 List<CouponDto> findByCouponCodeAndCouponId(String couponCode, int couponId);

 List<Coupon> com(String couponCode);

 List<Coupon> com1(String couponCode, int couponId);

 List<Coupon> com2(String couponCode, int couponId);

 List<Coupon> com3(String couponCode, int couponId);

} 
 150  spring-boot-demo-coupon/src/main/java/com/zensar/Service/CouponServiceImpl.java
@@ -0,0 +1,150 @@
package com.zensar.Service;

import java.util.ArrayList;
import java.util.List;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.stereotype.Service;

import com.zensar.Repository.CouponRepository;
import com.zensar.dto.CouponDto;
import com.zensar.entity.Coupon;

@Service
public abstract class CouponServiceImpl implements CouponService {

 @Autowired
 private CouponRepository couponrepository;

 @Autowired
 private ModelMapper modelMapper;

 @Override
 public CouponDto getCoupon(int couponId) {
 Coupon coupon = couponrepository.findById(couponId).get();

 return modelMapper.map(coupon, CouponDto.class);
 // CouponDto dto= mapToDto(coupon);
 // return dto;
 /*
 * CouponDto dto = new CouponDto(); dto.setCouponId(coupon.getCouponId());
 * dto.setCouponCode(coupon.getCouponCode());
 * dto.setExpDate(coupon.getexpDate()); return dto;
 */
 }

 @Override
 public List<CouponDto> getAllCoupon(int pageNumber, int pageSize, String sortBy, Direction dir) {
 // List<Coupon> listOfCoupons = couponrepository.findAll();
 List<CouponDto> listOfDto = new ArrayList<CouponDto>();
 Page<Coupon> findAll = couponrepository.findAll(PageRequest.of(pageNumber, pageSize, dir, sortBy));
 List<Coupon> content = findAll.getContent();
 for (Coupon coupon : content) {
 // listOfDto.add(mapToDto(coupon));
 listOfDto.add(modelMapper.map(coupon, CouponDto.class));
 }

 return listOfDto;
 }

 @Override
 public CouponDto insertCoupon(CouponDto couponDto) {
 // Coupon coupon = mapToEntity(couponDto);
 Coupon coupon = modelMapper.map(couponDto, Coupon.class);
 Coupon insertedCoupon = couponrepository.save(coupon);
 return modelMapper.map(insertedCoupon, CouponDto.class);
 // CouponDto mapToDto = mapToDto(insertedCoupon);
 // return mapToDto;
 /*
 * CouponDto dto = new CouponDto();
 * dto.setCouponId(insertedCoupon.getCouponId());
 * dto.setCouponCode(insertedCoupon.getCouponCode());
 * dto.setExpDate(insertedCoupon.getexpDate()); return dto;
 */

 /*
 * CouponDto dto = new CouponDto(); dto.setCouponId(insertCoupon.getCouponId());
 * dto.setCouponCode(insertCoupon.getCouponCode());
 * dto.setExpDate(insertCoupon.getexpDate()); return dto;
 */
 }

 @Override
 public void updateCoupon(int couponId, CouponDto couponDto) {
 // Coupon coupon = mapToEntity(couponDto);
 Coupon coupon = modelMapper.map(couponDto, Coupon.class);
 couponrepository.save(coupon);

 /*
 * Coupon coupon = new Coupon(); coupon.setCouponId(couponDto.getCouponId());
 * coupon.setCouponCode(couponDto.getCouponCode());
 * coupon.setexpDate(couponDto.getExpDate());
 * 
 * couponrepository.save(coupon);
 */
 }

 @Override
 public void deleteCoupon(int couponId) {
 couponrepository.deleteById(couponId);
 }
 /*
 * public CouponDto mapToDto(Coupon coupon) { CouponDto dto = new CouponDto();
 * dto.setCouponId(coupon.getCouponId());
 * dto.setCouponCode(coupon.getCouponCode());
 * dto.setExpDate(coupon.getexpDate()); return dto;
 * 
 * } public Coupon mapToEntity(CouponDto couponDto) { Coupon coupon= new
 * Coupon(); coupon.setCouponId(couponDto.getCouponId());
 * coupon.setCouponCode(couponDto.getCouponCode());
 * coupon.setexpDate(couponDto.getExpDate()); return coupon; }
 */

 @Override
 public List<CouponDto> getByCouponCode(String couponCode) {
 // return couponrepository.getByCouponCode(couponCode);
 List<CouponDto> couponDtos = new ArrayList<>();
 List<Coupon> coupons = couponrepository.com(couponCode);
 for (Coupon coupon : coupons)
 couponDtos.add(modelMapper.map(coupon, CouponDto.class));
 return couponDtos;
 }


 @Override
 public List<CouponDto> findByCouponCodeAndCouponId(String couponCode, int couponId) {

 List<CouponDto> couponDtos = new ArrayList<>();
 List<Coupon> coupons = couponrepository.com3(couponCode, couponId);
 for (Coupon coupon : coupons)
 couponDtos.add(modelMapper.map(coupon, CouponDto.class));
 return couponDtos;

 // return couponrepository.findByCouponCodeAndCouponId(couponCode, couponId);
 }

 @Override
 public List<Coupon> com(String couponCode) {
 return couponrepository.com(couponCode);
 }

 @Override
 public List<Coupon> com1(String couponCode, int couponId) {
 return couponrepository.com1(couponCode, couponId);
 }

 @Override
 public List<Coupon> com2(String couponCode, int couponId) {
 return couponrepository.com2(couponCode, couponId);
 }

 @Override
 public List<Coupon> com3(String couponCode, int couponId) {
 return couponrepository.com3(couponCode, couponId);
 }

} 
 48  spring-boot-demo-coupon/src/main/java/com/zensar/dto/CouponDto.java
@@ -0,0 +1,48 @@
package com.zensar.dto;

public class CouponDto {
 private int couponId;
 private String couponCode;
 private String expDate;

 public CouponDto() {
 super();
 }

 public CouponDto(int couponId, String couponCode, String expDate) {
 super();
 this.couponId = couponId;
 this.couponCode = couponCode;
 this.expDate = expDate;
 }

 public int getCouponId() {
 return couponId;
 }

 public void setCouponId(int couponId) {
 this.couponId = couponId;
 }

 public String getCouponCode() {
 return couponCode;
 }

 public void setCouponCode(String couponCode) {
 this.couponCode = couponCode;
 }

 public String getExpDate() {
 return expDate;
 }

 public void setExpDate(String expDate) {
 this.expDate = expDate;
 }

 @Override
 public String toString() {
 return "CouponDto [couponId=" + couponId + ", couponCode=" + couponCode + ", expDate=" + expDate + "]";
 }

} 
 81  spring-boot-demo-coupon/src/main/java/com/zensar/entity/Coupon.java
@@ -0,0 +1,81 @@
package com.zensar.entity;

import java.util.Date;

import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;

@Entity
@NamedQueries(value = { @NamedQuery(name = "Coupon.com", query = "from Coupon c where c.couponCode=?1"),
 @NamedQuery(name = "Coupon.com1", query = "from Coupon c where c.couponCode=?1 and c.couponId=?2") })
//@NamedQuery(name="Coupon.com" ,query="from Coupon c where c.couponCode=?1")
//@NamedQuery(name="Coupon.com1",query="from Coupon c where c.couponCode=?1 and c.couponId=?2")
@NamedNativeQuery(name = "Coupon.com2", query = "select * from Coupon c where c.coupon_code=?1 and c.coupon_id=?2 ", resultClass = Coupon.class)
public class Coupon {
 @Id
 private int couponId;
 private String couponCode;
 private String expDate;
 private String couponName;

 public Coupon() {
 super();
 }

 public Coupon(int couponId, String couponCode, String expDate, String couponName) {
 super();
 this.couponId = couponId;
 this.couponCode = couponCode;
 this.expDate = expDate;
 this.couponName = couponName;
 }

 public Coupon(int couponId, String couponCode, String expDate) {
 super();
 this.couponId = couponId;
 this.couponCode = couponCode;
 this.expDate = expDate;
 }

 public int getCouponId() {
 return couponId;
 }

 public void setCouponId(int couponId) {
 this.couponId = couponId;
 }

 public String getCouponCode() {
 return couponCode;
 }

 public void setCouponCode(String couponCode) {
 this.couponCode = couponCode;
 }

 public String getexpDate() {
 return expDate;
 }

 public void setexpDate(String expDate) {
 this.expDate = expDate;
 }

 public String getCouponName() {
 return couponName;
 }

 public void setCouponName(String couponName) {
 this.couponName = couponName;
 }

 @Override
 public String toString() {
 return "Coupon [couponId=" + couponId + ", couponCode=" + couponCode + ", expDate=" + expDate + ", couponName="
 + couponName + "]";
 }

} 
 34  ...-boot-demo-coupon/src/main/java/com/zensarspringbootdemo/SpringBootCouponApplication.java
@@ -0,0 +1,34@@
package com.zensarspringbootdemo;

import org.modelmapper.ModelMapper;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
//import org.springframework.context.annotation.ComponentScan;

@SpringBootApplication
//@ComponentScan(basePackages = { "com.zensarspringbootdemo" })
public class SpringBootCouponApplication {

 /*
 * public class SpringBootCouponApplication extends
 * SpringBootServletInitializer{
 * 
 * @Override protected SpringApplicationBuilder
 * configure(SpringApplicationBuilder builder) {
 * 
 * return super.configure(builder); }
 */

 public static void main(String[] args) {
 System.out.println("shiva");
 SpringApplication.run(SpringBootCouponApplication.class, args);
 System.out.println("siddu");
 System.out.println("let's start");
 }

 @Bean
 public ModelMapper getModelMapper() {
 return new ModelMapper();
 }

} 
 11  spring-boot-demo-coupon/src/main/resources/application.properties
@@ -0,0 +1,11 @@
#spring.h2.console.path=/h2
#spring.datasource.url=jdbc:h2:mem:studentdb
#spring.datasource.username=admin
#spring.datasource.password=admin

server.port=6060
spring.datasource.url=jdbc:mysql://localhost:3306/javabatch
spring.datasource.username=root
spring.datasource.password=Temp1234
spring.jpa.hibernate.ddl-auto=update

 17  spring-boot-demo-coupon/src/main/resources/application.yml
@@ -0,0 +1,17 @@
server:
 port: 6060
spring:
 datasource:
 password: Temp1234
 url: jdbc:mysql://localhost:3306/javabatch
 username: root

 jpa:
 hibernate:
 ddl-auto: update
 show-sql: true
 properties:
 hibernate:
 format_sql: true
 database-platform: org.hibernate.dialect.MySQL5Dialect

 13  ...o-coupon/src/test/java/com/zensarspringbootdemo/SpringBootDemoCouponApplicationTests.java
@@ -0,0 +1,13 @@
package com.zensarspringbootdemo;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class SpringBootDemoCouponApplicationTests {

 @Test
 void contextLoads() {
 }

}
 11  spring-boot-demo-coupon/target/classes/application.properties
@@ -0,0 +1,11 @@
#spring.h2.console.path=/h2
#spring.datasource.url=jdbc:h2:mem:studentdb
#spring.datasource.username=admin
#spring.datasource.password=admin

server.port=6060
spring.datasource.url=jdbc:mysql://localhost:3306/javabatch
spring.datasource.username=root
spring.datasource.password=Temp1234
spring.jpa.hibernate.ddl-auto=update

 17  spring-boot-demo-coupon/target/classes/application.yml
@@ -0,0 +1,17 @@
server:
 port: 6060
spring:
 datasource:
 password: Temp1234
 url: jdbc:mysql://localhost:3306/javabatch
 username: root

 jpa:
 hibernate:
 ddl-auto: update
 show-sql: true
 properties:
 hibernate:
 format_sql: true
 database-platform: org.hibernate.dialect.MySQL5Dialect

 BIN +5.62 KB spring-boot-demo-coupon/target/classes/com/zensar/Controller/CouponController.class
Binary file not shown.
 BIN +1.01 KB spring-boot-demo-coupon/target/classes/com/zensar/Repository/CouponRepository.class
Binary file not shown.
 BIN +1.46 KB spring-boot-demo-coupon/target/classes/com/zensar/Service/CouponService.class
Binary file not shown.
 BIN +5.1 KB spring-boot-demo-coupon/target/classes/com/zensar/Service/CouponServiceImpl.class
Binary file not shown.
 BIN +1.5 KB spring-boot-demo-coupon/target/classes/com/zensar/dto/CouponDto.class
Binary file not shown.
 BIN +2.46 KB spring-boot-demo-coupon/target/classes/com/zensar/entity/Coupon.class
Binary file not shown.
 BIN +1.18 KB ...oot-demo-coupon/target/classes/com/zensarspringbootdemo/SpringBootCouponApplication.class
Binary file no
